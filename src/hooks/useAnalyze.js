import { useState } from "react";
import { analyzeLanguage } from "../api/apis"; // ‚úÖ Import API ph√¢n t√≠ch ng√¥n ng·ªØ
import { Bounce, toast } from "react-toastify";

// ‚úÖ H√†m lo·∫°i b·ªè k√Ω t·ª± ƒë·∫∑c bi·ªát & kho·∫£ng tr·∫Øng
const removeSpecialCharacters = (text) => {
  return text.replace(/[.,:;#@$%^&*()_+={}[\]<>?/\\|"'\-‚Äî\s]/g, "");
};

const useAnalyze = () => {
  const [analysisResult, setAnalysisResult] = useState([]); // ‚úÖ L∆∞u k·∫øt qu·∫£ ph√¢n t√≠ch
  const [isAnalyzing, setIsAnalyzing] = useState(false); // ‚úÖ Tr·∫°ng th√°i ƒëang ph√¢n t√≠ch
  const [totalLength, setTotalLength] = useState(0); // ‚úÖ T·ªïng k√Ω t·ª± h·ª£p l·ªá

  const handleAnalyze = async (text) => {
    if (!text.trim()) {
      toast.error('Kh√¥ng c√≥ vƒÉn b·∫£n ƒë·ªÉ ph√¢n t√≠ch', {
        position: "top-right",
        autoClose: 5000,
        hideProgressBar: false,
        closeOnClick: false,
        pauseOnHover: true,
        draggable: true,
        progress: undefined,
        theme: "light",
        transition: Bounce,
        });
      return;
    }

    try {
      setIsAnalyzing(true);
      console.log("üîç ƒêang ph√¢n t√≠ch ng√¥n ng·ªØ...");

      const detectedLanguages = await analyzeLanguage(text);

      if (!detectedLanguages.length) {
        console.warn("‚ö† Kh√¥ng nh·∫≠n di·ªán ƒë∆∞·ª£c ng√¥n ng·ªØ.");
        setAnalysisResult([]);
        setIsAnalyzing(false);
        return;
      }

      // ‚úÖ Lo·∫°i b·ªè k√Ω t·ª± ƒë·∫∑c bi·ªát & t√≠nh t·ªïng s·ªë k√Ω t·ª± h·ª£p l·ªá
      const cleanedText = removeSpecialCharacters(text);
      const totalChars = cleanedText.length;
      setTotalLength(totalChars);

      console.log(`üìä T·ªïng s·ªë k√Ω t·ª± h·ª£p l·ªá: ${totalChars}`);

      // ‚úÖ T√≠nh ph·∫ßn trƒÉm t·ª´ng ng√¥n ng·ªØ
      const analyzedResult = detectedLanguages.map((lang) => {
        const langChars = removeSpecialCharacters(lang.text).length;
        const percentage = totalChars > 0 ? ((langChars / totalChars) * 100).toFixed(2) : 0;
        return { ...lang, charCount: langChars, percentage };
      });

      setAnalysisResult(analyzedResult);
    } catch (error) {
      console.error("‚ùå L·ªói khi ph√¢n t√≠ch ng√¥n ng·ªØ:", error);
    } finally {
      setIsAnalyzing(false);
    }
  };

  return { setAnalysisResult, analysisResult, isAnalyzing, handleAnalyze, totalLength };
};

export default useAnalyze;
