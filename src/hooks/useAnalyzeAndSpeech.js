import { useState, useRef, useEffect } from "react";
import { analyzeLanguage, textToSpeech } from "../api/apis"; // ‚úÖ Import API
import { Bounce, toast } from "react-toastify";

const useAnalyzeAndSpeech = (currentText) => {
  const [isSpeaking, setIsSpeaking] = useState(false);  // ‚úÖ Tr·∫°ng th√°i ph√°t √¢m thanh
  const [isAnalyze, setIsAnalyze] = useState(false);    // ‚úÖ Tr·∫°ng th√°i ph√¢n t√≠ch
  const [currentLang, setCurrentLang] = useState("");   // ‚úÖ Ng√¥n ng·ªØ ƒëang ph√°t
  const [downloadableAudio, setDownloadableAudio] = useState(null); // ‚úÖ URL audio ƒë·ªÉ t·∫£i xu·ªëng
  const [canShowDownload, setCanShowDownload] = useState(false); // ‚úÖ M·ªõi: Hi·ªÉn th·ªã n√∫t t·∫£i sau khi ph√°t h·∫øt
  
  const audioRef = useRef(null);                        // ‚úÖ L∆∞u ƒë·ªëi t∆∞·ª£ng `Audio`
  const stopRequested = useRef(false);                  // ‚úÖ C·ªù ki·ªÉm tra n·∫øu d·ª´ng ph√°t
  
  // ‚úÖ B·ªô nh·ªõ ƒë·ªám ƒë∆°n gi·∫£n
  const lastTextRef = useRef("");                       // ‚úÖ L∆∞u vƒÉn b·∫£n ƒë√£ x·ª≠ l√Ω tr∆∞·ªõc ƒë√≥  
  const lastResultRef = useRef(null);                   // ‚úÖ L∆∞u k·∫øt qu·∫£ ph√¢n t√≠ch ng√¥n ng·ªØ
  const lastAudioRef = useRef(null);                    // ‚úÖ M·ªõi: L∆∞u d·ªØ li·ªáu audio c·ªßa l·∫ßn x·ª≠ l√Ω tr∆∞·ªõc

  const analyzeAndSpeak = async (text) => {
    if (!text.trim()) {
      console.warn("‚ö† Kh√¥ng c√≥ vƒÉn b·∫£n ƒë·ªÉ ph√¢n t√≠ch.");
      return;
    }

    try {
      stopRequested.current = false;  // ‚úÖ Reset tr·∫°ng th√°i d·ª´ng
      
      // ‚úÖ Ki·ªÉm tra n·∫øu vƒÉn b·∫£n ƒë√£ thay ƒë·ªïi so v·ªõi l·∫ßn tr∆∞·ªõc
      const isTextChanged = text !== lastTextRef.current;
      
      if (isTextChanged) {
        // ‚úÖ VƒÉn b·∫£n thay ƒë·ªïi: X√≥a file audio c≈© v√† ·∫©n n√∫t t·∫£i xu·ªëng
        clearDownloadableAudio();
        setCanShowDownload(false);
      } else if (lastAudioRef.current && !isTextChanged) {
        // ‚úÖ VƒÉn b·∫£n kh√¥ng thay ƒë·ªïi v√† ƒë√£ c√≥ audio: Ph√°t l·∫°i audio c≈©
        console.log("üîÑ S·ª≠ d·ª•ng audio ƒë√£ t·∫°o tr∆∞·ªõc ƒë√≥");
        setIsSpeaking(true);
        
        // T·∫°o l·∫°i blob t·ª´ d·ªØ li·ªáu audio ƒë√£ l∆∞u
        const audioBlob = new Blob([lastAudioRef.current], { type: "audio/mpeg" });
        const audioURL = URL.createObjectURL(audioBlob);
        const audio = new Audio(audioURL);
        
        audioRef.current = audio;
        
        await new Promise((resolve) => {
          audio.onended = () => {
            URL.revokeObjectURL(audioURL);
            setCanShowDownload(true); // ‚úÖ Hi·ªÉn th·ªã n√∫t t·∫£i xu·ªëng sau khi ph√°t xong
            resolve();
          };
          audio.play().catch(error => {
            console.error("‚ùå L·ªói khi ph√°t audio:", error);
            resolve();
          });
        });
        
        setIsSpeaking(false);
        return; // ‚úÖ K·∫øt th√∫c s·ªõm v√¨ ƒë√£ ph√°t audio
      }
      
      // ‚úÖ Ph√¢n t√≠ch ng√¥n ng·ªØ (m·ªõi ho·∫∑c d√πng l·∫°i k·∫øt qu·∫£ c≈©)
      let detectedLanguages;
      
      if (!isTextChanged && lastResultRef.current) {
        // ‚úÖ S·ª≠ d·ª•ng k·∫øt qu·∫£ ph√¢n t√≠ch ƒë√£ l∆∞u
        console.log("üîÑ S·ª≠ d·ª•ng k·∫øt qu·∫£ ph√¢n t√≠ch ng√¥n ng·ªØ t·ª´ b·ªô nh·ªõ ƒë·ªám");
        detectedLanguages = lastResultRef.current;
      } else {
        // ‚úÖ Ph√¢n t√≠ch ng√¥n ng·ªØ m·ªõi
        setIsAnalyze(true);
        console.log("üîç ƒêang ph√¢n t√≠ch ng√¥n ng·ªØ...");
        
        detectedLanguages = await analyzeLanguage(text);
        
        if (!detectedLanguages.length) {
          console.warn("‚ö† Kh√¥ng nh·∫≠n di·ªán ƒë∆∞·ª£c ng√¥n ng·ªØ.");
          toast.error("‚ùå Kh√¥ng nh·∫≠n di·ªán ƒë∆∞·ª£c ng√¥n ng·ªØ!", {
            position: "top-right",
            autoClose: 3000,
            hideProgressBar: false,
            closeOnClick: true,
            pauseOnHover: true,
            draggable: true,
            progress: undefined,
            theme: "light",
            transition: Bounce,
          });
          setIsAnalyze(false);
          return;
        }
        
        console.log("üìå Ng√¥n ng·ªØ nh·∫≠n di·ªán:", detectedLanguages);
        
        // ‚úÖ L∆∞u k·∫øt qu·∫£ m·ªõi v√†o b·ªô nh·ªõ ƒë·ªám
        lastTextRef.current = text;
        lastResultRef.current = detectedLanguages;
        
        setIsAnalyze(false);
      }
      
      // ‚úÖ Ph·∫ßn ph√°t √¢m thanh (gi·ªëng nhau cho c·∫£ hai tr∆∞·ªùng h·ª£p)
      setIsSpeaking(true);

      // ‚úÖ T·∫°o m·∫£ng ƒë·ªÉ l∆∞u d·ªØ li·ªáu audio c·ªßa t·∫•t c·∫£ ng√¥n ng·ªØ
      const allAudioChunks = [];

      for (const lang of detectedLanguages) {
        if (stopRequested.current) break;

        setCurrentLang(lang.name);
        console.log(`üé§ Ph√°t: ${lang.text} (${lang.code})`);

        const audioBase64 = await textToSpeech(lang.text, lang.code);

        // Chuy·ªÉn ƒë·ªïi Base64 th√†nh Uint8Array
        const audioData = Uint8Array.from(atob(audioBase64), c => c.charCodeAt(0));
        
        // ‚úÖ L∆∞u d·ªØ li·ªáu audio cho t·∫£i xu·ªëng
        allAudioChunks.push(audioData);

        // T·∫°o Blob v√† URL ƒë·ªÉ ph√°t
        const audioBlob = new Blob([audioData], { type: "audio/mpeg" });
        const audioURL = URL.createObjectURL(audioBlob);
        const audio = new Audio(audioURL);
        
        audioRef.current = audio;

        await new Promise((resolve) => {
          audio.onended = () => {
            URL.revokeObjectURL(audioURL); // ‚úÖ Gi·∫£i ph√≥ng URL ngay khi kh√¥ng d√πng n·ªØa
            setCurrentLang("");
            resolve();
          };
          audio.play().catch(error => {
            console.error("‚ùå L·ªói khi ph√°t audio:", error);
            resolve();
          });
        });

        if (stopRequested.current) break;
      }

      // ‚úÖ T·∫°o file audio k·∫øt h·ª£p t·∫•t c·∫£ ng√¥n ng·ªØ ƒë·ªÉ t·∫£i xu·ªëng
      if (allAudioChunks.length > 0 && !stopRequested.current) {
        // N·ªëi c√°c ph·∫ßn d·ªØ li·ªáu audio
        const totalLength = allAudioChunks.reduce((acc, chunk) => acc + chunk.length, 0);
        const combinedAudio = new Uint8Array(totalLength);
        
        let offset = 0;
        for (const chunk of allAudioChunks) {
          combinedAudio.set(chunk, offset);
          offset += chunk.length;
        }
        
        // L∆∞u d·ªØ li·ªáu audio ƒë·ªÉ s·ª≠ d·ª•ng l·∫°i sau n√†y
        lastAudioRef.current = combinedAudio;
        
        // T·∫°o Blob v√† URL ƒë·ªÉ t·∫£i xu·ªëng
        const audioBlob = new Blob([combinedAudio], { type: "audio/mpeg" });
        const downloadURL = URL.createObjectURL(audioBlob);
        
        // L∆∞u URL ƒë·ªÉ t·∫£i xu·ªëng
        setDownloadableAudio({
          url: downloadURL,
          filename: `audio_${new Date().toISOString().replace(/[:.]/g, "-")}.mp3`
        });
        
        console.log("üíæ ƒê√£ t·∫°o file audio ƒë·ªÉ t·∫£i xu·ªëng");
        
        // ‚úÖ Ch·ªâ cho ph√©p hi·ªÉn th·ªã n√∫t t·∫£i xu·ªëng khi ph√°t xong
        setCanShowDownload(true);
      }

    } catch (error) {
      console.error("‚ùå L·ªói khi ph√¢n t√≠ch v√† ph√°t gi·ªçng n√≥i:", error);
      toast.error("‚ùå ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh x·ª≠ l√Ω!", {
        position: "top-right",
        autoClose: 3000,
        hideProgressBar: false,
        closeOnClick: true,
        pauseOnHover: true,
        draggable: true,
        progress: undefined,
        theme: "light",
        transition: Bounce,
      });
    } finally {
      setIsSpeaking(false);
      setIsAnalyze(false);
      setCurrentLang("");
    }
  };

  const stopSpeaking = () => {
    stopRequested.current = true;

    if (audioRef.current) {
      audioRef.current.pause();
      audioRef.current.currentTime = 0;
      audioRef.current = null;
      setIsSpeaking(false);
      setCurrentLang("");
      console.log("‚èπ ƒê√£ d·ª´ng ph√°t √¢m thanh.");
      
      // ‚úÖ Khi d·ª´ng ph√°t √¢m thanh, v·∫´n hi·ªÉn th·ªã n√∫t t·∫£i xu·ªëng n·∫øu c√≥ audio
      if (lastAudioRef.current) {
        setCanShowDownload(true);
      }
    }
  };

  // ‚úÖ H√†m x√≥a file audio t·∫£i xu·ªëng
  const clearDownloadableAudio = () => {
    if (downloadableAudio) {
      URL.revokeObjectURL(downloadableAudio.url);
      setDownloadableAudio(null);
    }
    setCanShowDownload(false);
    lastAudioRef.current = null;
  };

  // ‚úÖ Ki·ªÉm tra khi input text thay ƒë·ªïi
  useEffect(() => {
    // N·∫øu text thay ƒë·ªïi so v·ªõi text ƒë√£ l∆∞u trong ref, th√¨ x√≥a audio c≈©
    if (currentText && lastTextRef.current && currentText !== lastTextRef.current) {
      console.log("üìù Input text thay ƒë·ªïi, x√≥a file audio c≈©");
      clearDownloadableAudio();
      // Kh√¥ng c·∫≠p nh·∫≠t lastTextRef.current ·ªü ƒë√¢y, ƒë·ªÉ cho h√†m analyzeAndSpeak x·ª≠ l√Ω
    }
  }, [currentText]);

  // ‚úÖ Cleanup khi component unmount
  useEffect(() => {
    return () => {
      stopSpeaking();
      clearDownloadableAudio(); // ‚úÖ D·ªçn d·∫πp URL khi unmount
    };
  }, []);

  return { 
    analyzeAndSpeak, 
    stopSpeaking, 
    isSpeaking, 
    isAnalyze, 
    currentLang, 
    downloadableAudio, // ‚úÖ Th√¥ng tin file audio
    clearDownloadableAudio, // ‚úÖ Function ƒë·ªÉ x√≥a file audio
    canShowDownload, // ‚úÖ State ki·ªÉm so√°t hi·ªÉn th·ªã n√∫t t·∫£i xu·ªëng
    hasAudio: !!lastAudioRef.current // ‚úÖ Ki·ªÉm tra xem c√≥ audio hay kh√¥ng
  };
};

export default useAnalyzeAndSpeech;