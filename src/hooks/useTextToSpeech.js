import { useState } from "react";
import { textToSpeech } from "../api/apis"; // ‚úÖ Import API Text-to-Speech

const useTextToSpeech = () => {
  const [isSpeaking, setIsSpeaking] = useState(false);

  const playTextToSpeech = async (text, lang = "vi") => {
    if (!text.trim()) {
      console.warn("Kh√¥ng c√≥ vƒÉn b·∫£n ƒë·ªÉ ph√°t.");
      return;
    }

    try {
      setIsSpeaking(true);
      console.log("üîä ƒêang g·ªçi API Text-to-Speech...");

      const audioBase64 = await textToSpeech(text, lang);

      // Chuy·ªÉn ƒë·ªïi Base64 th√†nh Blob
      const audioBlob = new Blob([Uint8Array.from(atob(audioBase64), c => c.charCodeAt(0))], { type: "audio/mpeg" });

      // T·∫°o URL v√† ph√°t √¢m thanh
      const audioURL = URL.createObjectURL(audioBlob);
      const audio = new Audio(audioURL);

      audio.play();
      audio.onended = () => setIsSpeaking(false); // Khi ph√°t xong, c·∫≠p nh·∫≠t tr·∫°ng th√°i

    } catch (error) {
      console.error("L·ªói khi g·ªçi Text-to-Speech:", error);
    } finally {
      setIsSpeaking(false);
    }
  };

  return { playTextToSpeech, isSpeaking };
};

export default useTextToSpeech;
