import { useState, useRef } from "react";
import { speechToText, getCurrentUser, subtractUserCredits } from "../api/apis"; // ‚úÖ Th√™m API c·∫ßn thi·∫øt
import { Bounce, toast } from "react-toastify"; // ‚úÖ Th√™m toast ƒë·ªÉ th√¥ng b√°o
import { useDispatch } from "react-redux"; // ‚úÖ Th√™m Redux dispatch
import { toggleAction } from "../redux/actionSlice"; // ‚úÖ Th√™m action

const useSpeechToText = (setInputText) => {
  const [isRecording, setIsRecording] = useState(false);
  const [detectVoice, setDetectVoice] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const mediaRecorderRef = useRef(null);
  const audioChunksRef = useRef([]);
  const recordingStartTimeRef = useRef(null); // ‚úÖ Th√™m ref ƒë·ªÉ l∆∞u th·ªùi gian b·∫Øt ƒë·∫ßu ghi √¢m
  
  // ‚úÖ Th√™m dispatch t·ª´ Redux
  const dispatch = useDispatch();

  // ‚úÖ H√†m ∆∞·ªõc t√≠nh s·ªë credits d·ª±a tr√™n th·ªùi gian ghi √¢m (t√≠nh b·∫±ng gi√¢y)
  const estimateCredits = (durationInSeconds) => {
    // Speech-to-text r·∫ª h∆°n ph√¢n n·ª≠a so v·ªõi text, t√≠nh ph√≠ l√† ƒë·ªô d√†i (gi√¢y) chia 2
    // L√†m tr√≤n xu·ªëng v√† ƒë·∫£m b·∫£o √≠t nh·∫•t l√† 1 credit
    return Math.max(1, Math.floor(durationInSeconds / 2));
  };

  const startRecording = async () => {
    try {
      console.log("üé§ ƒêang y√™u c·∫ßu quy·ªÅn microphone...");
      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
      console.log("‚úÖ ƒê√£ c·∫•p quy·ªÅn microphone!");

      const mediaRecorder = new MediaRecorder(stream);
      mediaRecorderRef.current = mediaRecorder;
      audioChunksRef.current = [];
      
      // ‚úÖ L∆∞u th·ªùi gian b·∫Øt ƒë·∫ßu ghi √¢m
      recordingStartTimeRef.current = new Date();

      mediaRecorder.ondataavailable = (event) => {
        console.log("üîπ ƒê√£ nh·∫≠n d·ªØ li·ªáu √¢m thanh:", event.data);
        audioChunksRef.current.push(event.data);
      };

      mediaRecorder.onstop = async () => {
        console.log("‚èπ Ghi √¢m k·∫øt th√∫c!");
        setIsRecording(false);
        const audioBlob = new Blob(audioChunksRef.current, { type: "audio/wav" });

        // ‚úÖ T√≠nh to√°n th·ªùi l∆∞·ª£ng ghi √¢m (t√≠nh b·∫±ng gi√¢y)
        const recordingEndTime = new Date();
        const durationInSeconds = (recordingEndTime - recordingStartTimeRef.current) / 1000;
        console.log(`üïí Th·ªùi l∆∞·ª£ng ghi √¢m: ${durationInSeconds.toFixed(2)} gi√¢y`);
        
        // ‚úÖ ∆Ø·ªõc t√≠nh s·ªë credits c·∫ßn thi·∫øt
        const creditsRequired = estimateCredits(durationInSeconds);
        console.log(`üí∞ S·ªë credits c·∫ßn thi·∫øt: ${creditsRequired}`);
        
        // ‚úÖ TH√äM LOGIC KI·ªÇM TRA CREDITS
        // L·∫•y th√¥ng tin ng∆∞·ªùi d√πng t·ª´ localStorage
        const userData = localStorage.getItem("user");
        const user = userData ? JSON.parse(userData) : null;
        
        if (user?.user_id) {
          try {
            // Ki·ªÉm tra th√¥ng tin ng∆∞·ªùi d√πng
            const userInfoResult = await getCurrentUser(user.user_id);
            
            // Ki·ªÉm tra l·∫•y th√¥ng tin ng∆∞·ªùi d√πng th√†nh c√¥ng
            if (!userInfoResult.success) {
              toast.error("Kh√¥ng th·ªÉ l·∫•y th√¥ng tin ng∆∞·ªùi d√πng", {
                position: "top-right",
                autoClose: 5000,
                theme: "light",
                transition: Bounce,
              });
              return;
            }

            // L·∫•y s·ªë credits t·ª´ response
            const userCredits = userInfoResult.data?.credits || 0;
            
            // Ki·ªÉm tra ƒë·ªß credits kh√¥ng
            if (userCredits < creditsRequired) {
              toast.error(`Kh√¥ng ƒë·ªß credits. B·∫°n c·∫ßn ${creditsRequired} credits ƒë·ªÉ chuy·ªÉn gi·ªçng n√≥i th√†nh vƒÉn b·∫£n`, {
                position: "top-right",
                autoClose: 5000,
                theme: "light",
                transition: Bounce,
              });
              return;
            }

            // Tr·ª´ credits
            const creditsResult = await subtractUserCredits(user.user_id, creditsRequired);
            
            // Ki·ªÉm tra tr·ª´ credits th√†nh c√¥ng
            if (!creditsResult.success) {
              toast.error(creditsResult.error || "Kh√¥ng th·ªÉ tr·ª´ credits", {
                position: "top-right",
                autoClose: 5000,
                theme: "light",
                transition: Bounce,
              });
              return;
            }
            
            console.log(`‚úÖ ƒê√£ tr·ª´ ${creditsRequired} credits cho chuy·ªÉn gi·ªçng n√≥i th√†nh vƒÉn b·∫£n`);
            
            // Dispatch action ƒë·ªÉ reset ti·ªÅn trong Redux store
            dispatch(toggleAction());
          } catch (error) {
            console.error("‚ùå L·ªói khi ki·ªÉm tra ho·∫∑c tr·ª´ credits:", error);
            toast.error("ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω credits", {
              position: "top-right",
              autoClose: 5000,
              theme: "light",
              transition: Bounce,
            });
            return;
          }
        }
        // ‚úÖ K·∫æT TH√öC LOGIC KI·ªÇM TRA CREDITS

        console.log("üîπ G·ª≠i audioBlob ƒë·∫øn API:", audioBlob);
        setIsLoading(true);

        try {
          const result = await speechToText(audioBlob);
          console.log("‚úÖ K·∫øt qu·∫£ Speech-to-Text:", result);
          setInputText((prev) => prev + " " + result.transcript);
          setDetectVoice(result.detected_language);
        } catch (error) {
          console.error("‚ùå Speech-to-text th·∫•t b·∫°i:", error);
          toast.error("Kh√¥ng th·ªÉ chuy·ªÉn ƒë·ªïi gi·ªçng n√≥i th√†nh vƒÉn b·∫£n", {
            position: "top-right",
            autoClose: 5000,
            theme: "light",
            transition: Bounce,
          });
        } finally {
          setIsLoading(false);
        }
      };

      mediaRecorder.start();
      console.log("üéô Ghi √¢m b·∫Øt ƒë·∫ßu!");
      setIsRecording(true);
    } catch (error) {
      console.error("‚ùå Kh√¥ng th·ªÉ truy c·∫≠p microphone:", error);
      toast.error("Kh√¥ng th·ªÉ truy c·∫≠p microphone. Vui l√≤ng ki·ªÉm tra quy·ªÅn truy c·∫≠p.", {
        position: "top-right",
        autoClose: 5000,
        theme: "light",
        transition: Bounce,
      });
      setIsRecording(false);
    }
  };

  const stopRecording = () => {
    if (mediaRecorderRef.current) {
      console.log("‚èπ D·ª´ng ghi √¢m!");
      mediaRecorderRef.current.stop();
    }
  };

  return {
    isRecording,
    detectVoice,
    isLoading,
    startRecording,
    stopRecording,
    setDetectVoice,
  };
};

export default useSpeechToText;