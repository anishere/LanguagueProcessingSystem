import PropTypes from "prop-types";
import { HiOutlineSpeakerWave, HiOutlineStopCircle } from "react-icons/hi2";
import useTextToSpeech from "../hooks/useTextToSpeech"; // ‚úÖ Import Hook m·ªõi

const OutputText = ({ outputText, isLoading, outputRef, targetLang }) => {
  const { playTextToSpeech, stopSpeaking, isSpeaking } = useTextToSpeech(); // ‚úÖ S·ª≠ d·ª•ng Hook

  return (
    <div
      ref={outputRef} // ‚úÖ G√°n ref v√†o div output ƒë·ªÉ c·∫≠p nh·∫≠t chi·ªÅu cao t·ª´ InputTextArea
      className="border output-text position-relative"
      style={{ minHeight: "100px", overflowY: "auto" }}
    >
      {isLoading ? (
        <div className="text-center">
          <div className="text-primary" role="status">
            <span className="visually-hidden">Loading...</span>
          </div>
        </div>
      ) : (
        <p>{outputText || "B·∫£n d·ªãch..."}</p>
      )}
      {/* ‚úÖ X·ª≠ l√Ω ph√°t/d·ª´ng √¢m thanh khi nh·∫•n v√†o icon */}
      {outputText && 
        <i
        className={`position-absolute icon-speakerOut ${isSpeaking ? "speaking" : ""}`}
        onClick={isSpeaking ? stopSpeaking : () => playTextToSpeech(outputText, targetLang)}
        title={isSpeaking ? "‚èπ D·ª´ng ph√°t" : "üîä Ph√°t √¢m thanh"}
      >
        {isSpeaking ? <HiOutlineStopCircle /> : <HiOutlineSpeakerWave />}
      </i>
      }      
    </div>
  );
};

OutputText.propTypes = {
  outputText: PropTypes.string.isRequired,
  isLoading: PropTypes.bool.isRequired,
  outputRef: PropTypes.object, // ‚úÖ ƒê·ªãnh nghƒ©a outputRef
  targetLang: PropTypes.string.isRequired, // ‚úÖ Nh·∫≠n targetLang t·ª´ props
};

export default OutputText;
